<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd" >

	<!--blue print for the object-->
	<!-- we can also call init and destroy/cleanup in global beans -->
<!-- <beans default-init-method="myInit" default-destroy-method="cleanUp"> -->
<beans>
	<!-- <bean id="triangle" class="org.amin.springpractice.Triangle" name="triangle-name"> -->
		<!-- setter injection -->
		<!-- <property name="type" value="Equilateral"></property> -->
		
		<!-- although you comment out the setType setter [constructor injection]  -->
		<!-- type="int" type="java.lang.String" -->
		<!-- <constructor-arg value="Equilateral"></constructor-arg> -->
		<!-- <constructor-arg type="java.lang.String" value="20"></constructor-arg> -->
		<!-- <constructor-arg index="0" value="Equilateral"></constructor-arg> --> 
		<!-- <constructor-arg index="1" value="20"></constructor-arg> -->
		<!-- Object Injection -->
		<!-- <property name="pointA" ref="zeroPoint"></property> -->
		 <!-- idref not workingt -->
		<!-- <property name="pointA">
			<idref="zeroPoint" />
		</property>  -->
		<!-- <property name="pointB" ref="point2"> -->
		<!--<property name="pointB">		
			[No need id tag of inner bean]
			<bean class="org.amin.springpractice.Point">
				<property name="x" value="-20"></property>
				<property name="y" value="0"></property>
			</bean>
		</property> -->
		<!-- <property name="pointC">
			<bean class="org.amin.springpractice.Point">
				<property name="x" value="20"></property>
				<property name="y" value="0"></property>
			</bean>
		</property> -->
	<!--</bean> -->
	
	<!-- <bean id="zeroPoint" class="org.amin.springpractice.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>-->
	
	<!-- 
	<bean id="point2" class="org.amin.springpractice.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
	 -->
	<!-- 
	<bean id="point3" class="org.amin.springpractice.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	 -->
	 
	 <!-- using alias -->
	 <!--<alias name="triangle" alias="triangle-alias"/> -->
	 
	 <!-- Initializing Collections -->
	 <!-- 
	<bean id="triangle" class="org.amin.springpractice.Triangle">
	 	<property name="points">
			<list>
				<ref bean="zeroPoint" />
	 			<ref bean="point2" />
	 			<ref bean="point3" />
			</list>
		</property>
	</bean>
	 
	<bean id="zeroPoint" class="org.amin.springpractice.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="point2" class="org.amin.springpractice.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="point3" class="org.amin.springpractice.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	-->
	
	<!-- Bean Autowiring [autowire checks for member variables byName, byType for only one member variable, constructor for different types member variables] -->
	<!--  <bean id="triangle" class="org.amin.springpractice.Triangle" autowire="byName">  -->
	<!--  <bean id="triangle" class="org.amin.springpractice.Triangle" scope="prototype">  -->
	<!-- 
	<bean id="triangle" class="org.amin.springpractice.Triangle" autowire="byName">

	</bean>
	 
	<bean id="pointA" class="org.amin.springpractice.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="pointB" class="org.amin.springpractice.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="pointC" class="org.amin.springpractice.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	 -->
	 
	<!-- Bean Definition Inheritance -->
	<!-- 
	<bean id="parenttriangle" class="org.amin.springpractice.Triangle">
		<property name="pointA" ref="pointA"></property>
	</bean>
	
	<bean id="triangle1" class="org.amin.springpractice.Triangle" parent="parenttriangle">
		<property name="pointB" ref="pointB"></property>
		<property name="pointC" ref="pointC"></property>
	</bean>
	 -->
	<!-- if you want to use as a templete but not initialize then use abstract="true" -->
	<!--
	<bean id="parenttriangle" class="org.amin.springpractice.Triangle" abstract="true">
		<property name="points">
			<list>
				<ref bean="pointA"/>
			</list>
		</property>
	</bean>
	
	<bean id="triangle1" class="org.amin.springpractice.Triangle" parent="parenttriangle">
		<property name="points">
			<list merge="true">
				<ref bean="pointB"/>
			</list>
		</property>
	</bean>
	
	<bean id="triangle2" class="org.amin.springpractice.Triangle" parent="parenttriangle">
	</bean>
	 
	<bean id="pointA" class="org.amin.springpractice.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="pointB" class="org.amin.springpractice.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="pointC" class="org.amin.springpractice.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	-->
	
	<!-- Lifecycle Callbacks -->
	<!-- <bean id="triangle" class="org.amin.springpractice.Triangle" autowire="byName" init-method="myInit" destroy-method="cleanUp"> -->
	<!-- 
	<bean id="triangle" class="org.amin.springpractice.Triangle" autowire="byName" >

	</bean>
	 
	<bean id="pointA" class="org.amin.springpractice.Point">
		<property name="x" value="0"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="pointB" class="org.amin.springpractice.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<bean id="pointC" class="org.amin.springpractice.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	 -->
	 
	<bean id="triangle" class="org.amin.springpractice.Triangle">
		<property name="pointA" ref="pointA"></property>
		<property name="pointB" ref="pointB"></property>
		<property name="pointC" ref="pointC"></property>
	</bean>	
		 
	<bean id="pointA" class="org.amin.springpractice.Point">
		<property name="x" value="${pointA.pointX}"></property>
		<property name="y" value="${pointA.pointY}"></property>
	</bean>
	<bean id="pointB" class="org.amin.springpractice.Point">
		<property name="x" value="-20"></property>
		<property name="y" value="0"></property>
	</bean>
	<bean id="pointC" class="org.amin.springpractice.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<!-- <bean class="org.amin.springpractice.DisplayNameBeanPostProcessor"></bean> -->
	<!-- <bean class="org.amin.springpractice.MyBeanFactoryPP"></bean> -->
	<!-- PropertyPlaceholderConfigurer -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="pointsconfig.properties"></property>
	</bean>
</beans>